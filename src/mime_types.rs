pub mod mime_types {

    use std::collections::HashMap;

    pub fn get_extension_to_mime_type_map() -> HashMap<String, String> {
        
        let mut extension_to_mime_type_map = HashMap::new();
        
        for (mime_type, file_extension) in get_nginx_mime_types() {
            extension_to_mime_type_map.insert(file_extension, mime_type);
        }

        extension_to_mime_type_map
    }

    /// returns an array with tuples (mime_type, file_extension)
    /// this list is manually generated from nginx' mime.types file
    /// TODO: implement parsing mime_types from nginx config file
    fn get_nginx_mime_types() -> Vec<(String, String)> {
        vec![
            (String::from("text/html"), String::from("html")),
            (String::from("text/html"), String::from("htm")),
            (String::from("text/html"), String::from("shtml")),
            (String::from("text/css"), String::from("css")),
            (String::from("text/xml"), String::from("xml")),
            (String::from("image/gif"), String::from("gif")),
            (String::from("image/jpeg"), String::from("jpeg")),
            (String::from("image/jpeg"), String::from("jpg")),
            (String::from("application/javascript"), String::from("js")),
            (String::from("application/atom+xml"), String::from("atom")),
            (String::from("application/rss+xml"), String::from("rss")),
            (String::from("text/mathml"), String::from("mml")),
            (String::from("text/plain"), String::from("txt")),
            (String::from("text/vnd.sun.j2me.app-descriptor"), String::from("jad")),
            (String::from("text/vnd.wap.wml"), String::from("wml")),
            (String::from("text/x-component"), String::from("htc")),
            (String::from("image/png"), String::from("png")),
            (String::from("image/tiff"), String::from("tif")),
            (String::from("image/tiff"), String::from("tiff")),
            (String::from("image/vnd.wap.wbmp"), String::from("wbmp")),
            (String::from("image/x-icon"), String::from("ico")),
            (String::from("image/x-jng"), String::from("jng")),
            (String::from("image/x-ms-bmp"), String::from("bmp")),
            (String::from("image/svg+xml"), String::from("svg")),
            (String::from("image/svg+xml"), String::from("svgz")),
            (String::from("image/webp"), String::from("webp")),
            (String::from("application/font-woff"), String::from("woff")),
            (String::from("application/java-archive"), String::from("jar")),
            (String::from("application/java-archive"), String::from("war")),
            (String::from("application/java-archive"), String::from("ear")),
            (String::from("application/json"), String::from("json")),
            (String::from("application/mac-binhex40"), String::from("hqx")),
            (String::from("application/msword"), String::from("doc")),
            (String::from("application/pdf"), String::from("pdf")),
            (String::from("application/postscript"), String::from("ps")),
            (String::from("application/postscript"), String::from("eps")),
            (String::from("application/postscript"), String::from("ai")),
            (String::from("application/rtf"), String::from("rtf")),
            (String::from("application/vnd.apple.mpegurl"), String::from("m3u8")),
            (String::from("application/vnd.ms-excel"), String::from("xls")),
            (String::from("application/vnd.ms-fontobject"), String::from("eot")),
            (String::from("application/vnd.ms-powerpoint"), String::from("ppt")),
            (String::from("application/vnd.wap.wmlc"), String::from("wmlc")),
            (String::from("application/vnd.google-earth.kml+xml"), String::from("kml")),
            (String::from("application/vnd.google-earth.kmz"), String::from("kmz")),
            (String::from("application/x-7z-compressed"), String::from("7z")),
            (String::from("application/x-cocoa"), String::from("cco")),
            (String::from("application/x-java-archive-diff"), String::from("jardiff")),
            (String::from("application/x-java-jnlp-file"), String::from("jnlp")),
            (String::from("application/x-makeself"), String::from("run")),
            (String::from("application/x-perl"), String::from("pl")),
            (String::from("application/x-perl"), String::from("pm")),
            (String::from("application/x-pilot"), String::from("prc")),
            (String::from("application/x-pilot"), String::from("pdb")),
            (String::from("application/x-rar-compressed"), String::from("rar")),
            (String::from("application/x-redhat-package-manager"), String::from("rpm")),
            (String::from("application/x-sea"), String::from("sea")),
            (String::from("application/x-shockwave-flash"), String::from("swf")),
            (String::from("application/x-stuffit"), String::from("sit")),
            (String::from("application/x-tcl"), String::from("tcl")),
            (String::from("application/x-tcl"), String::from("tk")),
            (String::from("application/x-x509-ca-cert"), String::from("der")),
            (String::from("application/x-x509-ca-cert"), String::from("pem")),
            (String::from("application/x-x509-ca-cert"), String::from("crt")),
            (String::from("application/x-xpinstall"), String::from("xpi")),
            (String::from("application/xhtml+xml"), String::from("xhtml")),
            (String::from("application/xspf+xml"), String::from("xspf")),
            (String::from("application/zip"), String::from("zip")),
            (String::from("application/octet-stream"), String::from("bin")),
            (String::from("application/octet-stream"), String::from("exe")),
            (String::from("application/octet-stream"), String::from("dll")),
            (String::from("application/octet-stream"), String::from("deb")),
            (String::from("application/octet-stream"), String::from("dmg")),
            (String::from("application/octet-stream"), String::from("iso")),
            (String::from("application/octet-stream"), String::from("img")),
            (String::from("application/octet-stream"), String::from("msi")),
            (String::from("application/octet-stream"), String::from("msp")),
            (String::from("application/octet-stream"), String::from("msm")),
            (String::from("application/vnd.openxmlformats-officedocument.wordprocessingml.document"), String::from("docx")),
            (String::from("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"), String::from("xlsx")),
            (String::from("application/vnd.openxmlformats-officedocument.presentationml.presentation"), String::from("pptx")),
            (String::from("audio/midi"), String::from("mid")),
            (String::from("audio/midi"), String::from("midi")),
            (String::from("audio/midi"), String::from("kar")),
            (String::from("audio/mpeg"), String::from("mp3")),
            (String::from("audio/ogg"), String::from("ogg")),
            (String::from("audio/x-m4a"), String::from("m4a")),
            (String::from("audio/x-realaudio"), String::from("ra")),
            (String::from("video/3gpp"), String::from("3gpp")),
            (String::from("video/3gpp"), String::from("3gp")),
            (String::from("video/mp2t"), String::from("ts")),
            (String::from("video/mp4"), String::from("mp4")),
            (String::from("video/mpeg"), String::from("mpeg")),
            (String::from("video/mpeg"), String::from("mpg")),
            (String::from("video/quicktime"), String::from("mov")),
            (String::from("video/webm"), String::from("webm")),
            (String::from("video/x-flv"), String::from("flv")),
            (String::from("video/x-m4v"), String::from("m4v")),
            (String::from("video/x-mng"), String::from("mng")),
            (String::from("video/x-ms-asf"), String::from("asx")),
            (String::from("video/x-ms-asf"), String::from("asf")),
            (String::from("video/x-ms-wmv"), String::from("wmv")),
            (String::from("video/x-msvideo"), String::from("avi")),
        ]
    }
}